VOID void
MAIN main
LPAR (
RPAR )
LBRACE {
INT int
ID ifa
SEMI ;
INT int
ID returnb
SEMI ;
INT int
ID voidc
SEMI ;
INT int
ID whiled
SEMI ;
ID ifa
ASSIGN =
ID returnb
SHL_OP <<
INT_NUM 1
PLUS +
INT_NUM 1
GT >
INT_NUM 2
AND_OP &
ID whiled
SEMI ;
ID returnb
ASSIGN =
ID voidc
SHR_OP >>
INT_NUM 2
LT <
INT_NUM 3
MINUS -
INT_NUM 4
OR_OP |
NOT_OP !
ID whiled
SEMI ;
DO do
LBRACE {
ID ifa
ASSIGN =
ID returnb
PLUS +
INT_NUM 1
SEMI ;
RBRACE }
WHILE while
LPAR (
ID ifa
LTEQ <=
ID returnb
ANDAND &&
ID voidc
LT <
ID whiled
RPAR )
DO do
LBRACE {
ID ifa
ASSIGN =
ID returnb
PLUS +
INT_NUM 1
SEMI ;
BREAK break
SEMI ;
RBRACE }
WHILE while
LPAR (
ID ifa
GTEQ >=
ID returnb
OROR ||
ID voidc
GT >
ID whiled
RPAR )
IF if
LPAR (
ID ifa
DIV_OP /
ID returnb
NOTEQ !=
ID voidc
MUL_OP *
ID whiled
ANDAND &&
ID ifa
EQ ==
ID whiled
RPAR )
LBRACE {
WRITE printf
LPAR (
ID ifa
COMMA ,
ID returnb
COMMA ,
ID voidc
COMMA ,
ID whiled
RPAR )
SEMI ;
RBRACE }
ELSE else
LBRACE {
READ scanf
LPAR (
RPAR )
SEMI ;
RBRACE }
INT int
MUL_OP *
ID ptr
ASSIGN =
AND_OP &
ID ifa
SEMI ;
ID ptr
LSQUARE [
INT_NUM 0
RSQUARE ]
SEMI ;
RETURN return
INT_NUM 0
SEMI ;
RBRACE }
